<div class="row">
    <div class="col-md-offset-2  col-md-8">
        <div class="panel panel-primary">
            <div class="panel-heading">
                Update Account Rates for <label id="accountName" style="text-decoration:underline"></label>
                <div class="btn-group pull-right">

                </div>
            </div>
            <div class="panel-body">

                <form id="dataForm" role="form" class="form-horizontal">
                    <div class="form-group col-md-12">
                        <table border="0">
                            <tr>
                                <td class="lblall"> <label for="ratePerHourInput">Rate per hour</label></td>

                                <td class="inptall">
                                    <input type="text" id="ratePerHourInput" name="ratePerHourInput"
                                           placeholder="Rate Per Hour" value="" />
                                </td>
                            </tr>
                        </table>
                    </div>

                    <div class="form-group col-md-12">
                        <table border="0">
                            <tr>
                                <td class="lblall"><label for="sdatepicker">Effective start date</label></td>

                                <td class="inptall">
                                    @*<div id="eStartDateInput" name="eStartDateInput">
                                  </div>*@
                                    <div class='date-picker input-group date' id="sdatepicker">
                                        <input type='text' class="form-control" readonly="readonly" required="required" name="sdatepicker" />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>


                    <div class="form-group col-md-12">
                        <table border="0">
                            <tr>
                                <td class="lblall"><label for="edatepicker">Effective end date</label></td>

                                <td class="inptall">
                                    @*<div id="eEndDateInput" name="eEndDateInput">
        </div>*@

                                    <div class='date-picker input-group date' id="edatepicker">
                                        <input type='text' class="form-control" readonly="readonly" name="edatepicker" />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>

                                    </div>

                                </td>

                            </tr>
                            <tr>
                                <td class="lblall"></td>
                                <td class="inptall"><label id="edatepicker-error" class="error" for="edatepicker"></label></td>
                            </tr>
                        </table>

                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-1"></label>
                        <div class="col-md-10">
                            <div class="pull-right">
                                <input type="button" class="btn btn-danger" value="Delete" data-toggle="modal" data-target="#confirm-delete" /> <!--id="deleteButton" in this line-->

                                <div class="modal fade" id="confirm-delete" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <strong>Delete Account rate record</strong>
                                            </div>
                                            <div class="modal-body">
                                                Are you sure about deleting this record?
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                                                <a class="btn btn-danger btn-ok" id="deleteButton">Delete</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <input type="button" class="btn btn-primary" value="Save" id="saveButton" />
                                <!--<a class="btn btn-default" asp-action="ManageCustomerAccounts" asp-controller="CustomerAccounts">Cancel</a> <!--cancel redirect page issue-->
                                <div id="cancel" class="btn-group pull-right">
                                </div>
                            </div>
                        </div>
                    </div>
                </form>

            </div><!-- end of div element which has the class="panel-body" -->
        </div><!-- end of the div element which has the class="panel" -->
    </div><!-- end of the div element which as the  class="col-md-offset-2 col-sm-8"-->
</div><!-- end of div element with class="row" -->


@section scripts{

    <link href="~/lib/bootstrap-datepicker/dist/css/bootstrap-datepicker.css" rel="stylesheet" />
    <link href="~/lib/jqwidgets/jqwidgets/styles/jqx.base.css" rel="stylesheet" />
    <link href="~/lib/jqwidgets/jqwidgets/styles/jqx.blackberry.css" rel="stylesheet" />
    <script src="~/lib/bootstrap-datepicker/dist/js/bootstrap-datepicker.js"></script>
    <script src="~/lib/jqwidgets/jqwidgets/jqx-all.js"></script>
    <script>
         $('#sdatepicker').datepicker({                            
            format: "mm-yyyy",
            viewMode: "months",
            minViewMode: "months",
            autoclose: true,
            orientation: 'bottom'
            
        });

        $("#edatepicker").datepicker({
            format: "mm-yyyy",
            viewMode: "months",
            minViewMode: "months",
            autoclose: true,
            orientation: 'bottom',
             clearBtn: true
        }); 




        const button = document.getElementById('cancel');
        const $href = $('<a>Cancel</a>');
        $href.addClass('btn btn-default');
        $href.css('margin-left', '5px');

        $('td').css('width', '230px');
        $('.modal').hide();

        $('.lblall').css('text-align', 'right');
        $('.lblall').css('display', 'block');

        $('.inptall').css('width', '400px');
        $('.inptall').css('padding-left', '30px');


     /*   const sDate = $('#eStartDateInput');
        sDate.jqxDateTimeInput({ width: '230px', height: '25px', theme: 'blackberry', readonly: true, allowKeyboardDelete: false });

        const eDate = $('#eEndDateInput');
        eDate.jqxDateTimeInput({ width: '230px', height: '25px', theme: 'blackberry', readonly: true }); */


        var g_rateId = getIdFromAddressBar();

        function getIdFromAddressBar() {
            var urlArray = window.location.href.split('/');
            var id = urlArray[urlArray.length - 1];
            return id;
        };


        class CusID {

            constructor() {
                this.customerAccountId = null;
            }
            setCustomerAccountId(id) {
                this.customerAccountId = id;

            }
            getCustomerAccountId() {
                return this.customerAccountId;
            }
        }

        const gid = new CusID();
        let g_cusId;
        window.conflictRecord = null;


        getRatesDetails().then(x => {
            g_cusId = gid.getCustomerAccountId();
            loadRatesData(g_cusId);
        })

        async function getRatesDetails() {
            $loadRateDataHandler = $.ajax({
                type: 'GET',
                url: '/API/AccountRates/RateDetail/' + g_rateId,
            });

            await $loadRateDataHandler.done(function (data, textStatus, jqXHR) {
                var rate = data;
                ratePerHour = rate.ratePerHour;
                customerAccountId = rate.customerAccountId;
                accountName = rate.accountName;
                gid.setCustomerAccountId(customerAccountId);

                $href.attr('href', `/CustomerAccounts/ManageAccountRates/${customerAccountId}`);
                $('#cancel').append($href);
                $('#ratePerHourInput').val(ratePerHour);
                eStartDate = rate.eStartDate;
                eEndDate = rate.eEndDate;
                $('#accountName').html(accountName);
                
                // eDate.jqxDateTimeInput({'setDate': new Date(2014, 01, 1) });
                // eStartDate = moment(rate.eStartDate).format("DD/MM/YYYY");
                //$('#eStartDateInput').jqxDateTimeInput('setDate', new Date(eStartDate));


                $('#sdatepicker').datepicker('setDate', new Date(eStartDate));

                if (eEndDate == null) {

                    //$('#eEndDateInput').jqxDateTimeInput('setDate', new Date(""));
                    $('#edatepicker').datepicker('setDate', new Date(""));
                }
                else {
                   // $('#eEndDateInput').jqxDateTimeInput('setDate', new Date(eEndDate));
                    $('#edatepicker').datepicker('setDate', new Date(eEndDate));
                }
            });

            $loadRateDataHandler.fail(function (data, textStatus, jqXHR) {
                console.log(textStatus);
                console.log(data);
                console.log(jqXHR);
                noty({
                    text: data.responseJSON.message, type: 'error',
                    layout: 'center',
                    template: '<div class="noty_message"><span class="noty_text"></span>'

                });
            });
        }


        var i;
        function loadRatesData(x) {
            console.log(x)
            var $loadRatesDataHandler = $.ajax({
                url: '/Api/AccountRates/GetRateDetail/' + x,
                method: 'GET',
                dataType: 'json',
                cache: false,
            });

            $loadRatesDataHandler.done(function (data, textStatus, jqXHR) {

                var rateList = data;
                i = rateList.filter(x => x.accountRateId != g_rateId);
                conflictRecord = new CheckConflict(i);
                for (index = 0; index < rateList.length; index++) {
                    rates = rateList[index];
                    ratePerHour = rates.ratePerHour;
                    //console.dir(ratePerHour);
                    eStartDate = rates.eStartDate;
                }
            });
        }


        class CheckConflict {

            constructor(inData) {
                this.rateList = inData;
            }


            check(rph, sd, ed) {

                for (var i = 0; i < this.rateList.length; i++) {
                    var date = sd;
                    var tt = date.split("-");
                    var nsd = tt[0] + '-' + tt[1] /*+ '-' + tt[2]*/;

                    // var nsd = moment().format(tt, "DD/MM/YYYY");

                    var estartd = formatDate(this.rateList[i].eStartDate)// That’s your formatted date.
                    var sdd = estartd.split('-');
                    var desd = sdd[0] + '-' + sdd[1];

                    //var esd = new Date(this.rateList[i].eStartDate);
                    //var desd = moment(esd).format("DD/MM/YYYY");
                    if ((this.rateList[i].ratePerHour === parseInt(rph)) && (desd == nsd)) {
                        //console.log("Duplicated data")
                        return true;
                    }

                    else if (desd == nsd) {
                        return true;

                    }


                    else if (ed != null) {

                        if (this.rateList[i].eEndDate != null) {
                            //var ned = moment().format(ed, "DD/MM/YYYY");

                            var edate = ed;
                            var ett = edate.split("-");
                            var ned = ett[0] + '-' + ett[1] /*+ '-' + ett[2]*/;


                            var dsd = formatDate(this.rateList[i].eEndDate);
                            var eee = dsd.split('-');

                            var deed = eee[0] + '-' + eee[1];
                            //var eed = new Date(this.rateList[i].eEndDate);
                            //var deed = moment(eed).format("DD/MM/YYYY");


                            if (ned >= desd) {
                                //ed >= moment(this.rateList[i].eStartDate).format('DD/MM/YYYY')
                                //sd <= moment(this.rateList[i].eEndDate).format('DD/MM/YYYY')

                                if (nsd <= deed) {
                                    //  alert("CORRECT");
                                    return true;
                                }
                            }
                            else if (nsd >= desd && ned <= deed) {
                                return true;
                            }

                            else if (nsd <= desd && ned >= deed) {
                                return true;

                            }
                            else if (desd == nsd) {
                                return true;
                            }

                        }

                        else {

                            var edate = ed;
                            var ett = ed.split('-');
                            var ned = ett[0] + '-' + ett[1] /*+ '-' + ett[2]*/;



                            if (ned == desd && this.rateList[i].ratePerHour === parseInt(rph)) {
                                return true;
                            }
                        }
                    }
       
                    else {
                        var dsd = formatDate(this.rateList[i].eEndDate);
                        var eee = dsd.split('-');
                        var deed = eee[0] + '-' + eee[1];

                        if (this.rateList[i].eEndDate == null) {
                            return true;

                        }
                        else if (desd == nsd || this.rateList[i].ratePerHour === parseInt(rph)) {
                            return true;
                        }
                    }
                }

                
                return false //will only reach here if the condition is not met
            }

            setRecord(rph, sd, ed) {
                this.ratePerHour = rph;
                this.eStartDate = sd;
                this.eEndDate = ed;

            }
            getRecord() {
                return { rate: this.ratePerHour, eStartDate: this.eStartDate };
            }
            setRate(ratePerHour) {
                this.ratePerHour = ratePerHour;
            }
            seteStartDate(esd) {
                this.eStartDate = esd;
            }

            seteEndDate(eed) {
                this.eEndDate = eed;
            }

            forLoopLesson() {
                let data = [2, 3, 4, 5]
                for (let i = 0; i < data.length; i++) {
                    if (data[i] === 4) {
                        //  console.log("true")
                        return true
                    }
                    else {
                        // console.log("false")
                        return false
                    }
                }
            }
        }

        function formatDate(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return [year, month, day].join('-');
        }



        setupFormValidationRules();

        function setupFormValidationRules() {

            //NUMBERS 2 DECIMAL PLACE ONLY
            $.validator.addMethod("numbers", function (value, element) {
                return value.match(/^[0-9]+(\.[0-9]{1,2})?$/);
            }, "Please specify positive numbers in 2 decimal place".fontsize('2px').fontcolor('red'));


            $.validator.addMethod("enddate", function (value, element) {
                //var sDate = $('#eStartDateInput').val('date');
                //var eDate = $('#eEndDateInput').val('date');
                var sDate = formatDate($('#sdatepicker').datepicker('getDate'));
                //var eDate = formatDate($('#edatepicker').datepicker('getDate'));

                var eDate = null;
                if ($('#edatepicker').datepicker('getDate') != null) {
                    var eyear = $('#edatepicker').data('datepicker').getFormattedDate('yyyy');
                    var emonth = $('#edatepicker').data('datepicker').getFormattedDate('mm');
                    var edate = new Date(eyear, emonth, 0);
                    eDate = formatDate(edate);
                }

              
                return (eDate) >= (sDate) || eDate == null;
            }, "End Date should be greater than Start Date.".fontsize('2px').fontcolor('red'));

            $("#dataForm").validate({
                rules: {
                    ratePerHourInput: {
                        required: true,
                        numbers: true
                    },
                    edatepicker: {
                        enddate: true
                    }

                },
                messages: {
                    ratePerHourInput: {
                        required: "This field is required".fontsize('3px').fontcolor('red')
                    }
                }
            });
        }//END OF VALIDATION

        $('#eEndDateInput').on('valueChanged', function () {
            $('#dataForm').valid();
        });


        function WebFormData(inRatePerHour, ineStartDate, ineEndDate) {
            this.ratePerHour = inRatePerHour;
            this.eStartDate = ineStartDate;
            this.eEndDate = ineEndDate;
        }


        $('#saveButton').on('click', function () {

            $('#dataForm').validate();
            if ($('#dataForm').valid()) {

                var collectedRatePerHour = $('#ratePerHourInput').val();
                //var collectedeStartDate = $('#eStartDateInput').val();
                var sdate = $('#sdatepicker').data('datepicker').getFormattedDate('yyyy/mm/01');
                var collectedeStartDate = formatDate(sdate);


                //var collectedeEndDate = null;
                //if ($('#eEndDateInput').val() != "") {
                //    collectedeEndDate = $('#eEndDateInput').val();
                //}

                var collectedeEndDate = null;
                if ($('#edatepicker').datepicker('getDate') != null) {
                    var eyear = $('#edatepicker').data('datepicker').getFormattedDate('yyyy');
                    var emonth = $('#edatepicker').data('datepicker').getFormattedDate('mm');
                    var edate = new Date(eyear, emonth, 0);
                    collectedeEndDate = formatDate(edate);

                }


                const isConflict = conflictRecord.check(collectedRatePerHour, collectedeStartDate, collectedeEndDate)
                if (isConflict == true) {
                    new Noty({
                        text: '<center><strong><p>Data Conflict!</p><p>Please check again before submitting!</p></strong><center>',
                        theme: 'sunset',
                        layout: 'center',
                        type: 'error'
                    }).show()
                    return;
                }


                var webFormData = new WebFormData(collectedRatePerHour, collectedeStartDate, collectedeEndDate);
                //var webFormDataInString = JSON.stringify(webFormData);


                $updateRateHandler = $.ajax({
                    type: 'PUT',
                    url: '/API/AccountRates/' + g_rateId,
                    //dataType: 'json',
                    //contentType: 'application/json;',
                    data: webFormData
                })


                $updateRateHandler.done(function (data, textStatus, jqXHR) {
                    new Noty({
                        text: data.message, type: 'success',
                        theme: 'sunset',
                        layout: 'center',
                        template: '<div class="noty_message"><span class="noty_text"></span>'
                    }).show();

                });

                $updateRateHandler.fail(function (data, textStatus, jqXHR) {
                    new Noty({
                        text: data.responseJSON.message, type: 'error',
                        theme: 'sunset',
                        layout: 'center',
                        template: '<div class="noty_message"><span class="noty_text"></span>'
                    }).show();
                });
            }
        });


        $('#deleteButton').on('click', function () {
            $('.modal-dialog').fadeOut(1000);

            $deleteCustomerHandler = $.ajax({

                type: 'DELETE',
                url: '/API/AccountRates/' + g_rateId

            })

            $deleteCustomerHandler.done(function (data, textStatus, jqXHR) {
                let n = new Noty({
                    text: data.message,
                    type: 'success',
                    theme: 'sunset',
                    layout: 'center',
                    template: '<div class="noty_message"><span class="noty_text"></span>',
                    buttons: [
                        Noty.button('OK', 'btn btn-primary', function () {
                            n.close()
                            $('body').fadeOut(500, redirectPage);
                        })
                    ]
                }).show();
            });//end of deleteSessionHandler.done()

            $deleteCustomerHandler.fail(function (data, textStatus, jqXHR) {
                console.log(data);
                new Noty({

                    text: data.responseJSON.message,
                    type: 'error',
                    theme: 'sunset',
                    layout: 'center',
                    template: '<div class="noty_message"><span class="noty_text"></span>'
                }).show();
            });

        }); //end of delete button

        function redirectPage() {
            location.replace('/CustomerAccounts/ManageAccountRates/' + customerAccountId);
        };



    </script>

}